# Generated by Django 4.0.2 on 2022-03-08 01:59

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountBalances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_date', models.DateField(blank=True)),
                ('audit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='audited amount')),
                ('delta', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='relative change for the day')),
                ('balance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='balance for the day')),
            ],
            options={
                'db_table': 'budgetdb_accounttotal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountPresentation',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('account_number', models.CharField(blank=True, max_length=200)),
                ('childrens', models.CharField(blank=True, max_length=200, null=True)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'db_table': 'budgetdb_account_presentation',
                'ordering': ['name'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CatSums',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField(blank=True, verbose_name='month')),
                ('total', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='balance for the day')),
            ],
            options={
                'db_table': 'budgetdb_cattotals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('account_number', models.CharField(blank=True, max_length=200)),
                ('comment', models.CharField(blank=True, max_length=200, null=True, verbose_name='Comment')),
                ('TFSA', models.BooleanField(default=False, verbose_name='Account is a TFSA for canadian fiscal considerations')),
                ('RRSP', models.BooleanField(default=False, verbose_name='Account is a RRSP for canadian fiscal considerations')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccountHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Financial Institution',
                'verbose_name_plural': 'Financial Institutions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BudgetedEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('generated_interval_start', models.DateTimeField(blank=True, null=True, verbose_name='begining of the generated events interval')),
                ('generated_interval_stop', models.DateTimeField(blank=True, null=True, verbose_name='end of the generated events interval')),
                ('amount_planned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Budgeted amount')),
                ('percent_planned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='percent of another event.  say 10% of pay goes to RRSP')),
                ('description', models.CharField(default='Description', max_length=200)),
                ('budget_only', models.BooleanField(default=False, verbose_name='only for budgeting, no actual expense planned')),
                ('isrecurring', models.BooleanField(default=True, verbose_name='Is this a recurring event?')),
                ('ismanual', models.BooleanField(default=False, verbose_name='Is this an event that require manual intervention?')),
                ('repeat_start', models.DateField(verbose_name='date of the first event')),
                ('repeat_stop', models.DateField(blank=True, null=True, verbose_name='date of the last event, optional')),
                ('nb_iteration', models.IntegerField(blank=True, null=True, verbose_name='number of repetitions, null if not applicable')),
                ('joined_order', models.IntegerField(blank=True, null=True, verbose_name='position in a joined transaction')),
                ('repeat_interval_days', models.IntegerField(default=0, verbose_name='period in days, 0 if not applicable')),
                ('repeat_interval_years', models.IntegerField(default=0, verbose_name='period in years, 0 if not applicable')),
                ('repeat_interval_months', models.IntegerField(default=0, verbose_name='period in months, 0 if not applicable')),
                ('repeat_interval_weeks', models.IntegerField(default=0, verbose_name='period in weeks, 0 if not applicable')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
                ('repeat_months_mask', models.IntegerField(default=4095, verbose_name='binary mask of applicable months. Always Applicable jan=1 feb=2 mar=4 ... dec=2048 ALL=4095')),
                ('repeat_dayofmonth_mask', models.IntegerField(default=2147483647, verbose_name='binary mask of applicable month days. Always Applicable ALL=2147483647')),
                ('repeat_weekofmonth_mask', models.IntegerField(default=63, verbose_name='binary mask of applicable month week. Always Applicable ALL=15')),
                ('repeat_weekday_mask', models.IntegerField(default=127, verbose_name='binary mask of applicable week day. Always Applicable ALL=127')),
                ('account_destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='b_account_destination', to='budgetdb.account')),
                ('account_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='b_account_source', to='budgetdb.account')),
                ('budgetedevent_percent_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.budgetedevent')),
            ],
            options={
                'verbose_name': 'Budgeted Event',
                'verbose_name_plural': 'Budgeted Events',
            },
        ),
        migrations.CreateModel(
            name='Cat1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cat2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Sub Category',
                'verbose_name_plural': 'Sub Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CatBudget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_frequency', models.CharField(choices=[('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly'), ('Y', 'Yearly')], default='D', max_length=1)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Category Budget',
                'verbose_name_plural': 'Categories Budgets',
            },
        ),
        migrations.CreateModel(
            name='CatType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Category Type',
                'verbose_name_plural': 'Categories Type',
            },
        ),
        migrations.CreateModel(
            name='MyCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_date', models.DateField(verbose_name='date')),
                ('year', models.IntegerField(verbose_name='year')),
                ('month', models.IntegerField(verbose_name='month')),
                ('day', models.IntegerField(verbose_name='year')),
                ('quarter', models.IntegerField(verbose_name='quarter')),
                ('week', models.IntegerField(verbose_name='week')),
                ('day_name', models.CharField(max_length=9, verbose_name='Day name EN')),
                ('month_name', models.CharField(max_length=9, verbose_name='Month Name EN')),
                ('holiday_flag', models.BooleanField(default=False, verbose_name='Holiday Flag')),
                ('weekend_flag', models.BooleanField(default=False, verbose_name='Weekend Flag')),
                ('event', models.CharField(max_length=50, verbose_name='Event name')),
            ],
            options={
                'verbose_name': 'Calendar',
                'verbose_name_plural': 'Calendars',
            },
        ),
        migrations.CreateModel(
            name='Recurring',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generated_interval_start', models.DateTimeField(blank=True, null=True, verbose_name='begining of the generated events interval')),
                ('generated_interval_stop', models.DateTimeField(blank=True, null=True, verbose_name='end of the generated events interval')),
                ('repeat_start', models.DateField(verbose_name='date of the first event')),
                ('repeat_stop', models.DateField(blank=True, null=True, verbose_name='date of the last event, optional')),
                ('nb_iteration', models.IntegerField(blank=True, null=True, verbose_name='number of repetitions, null if not applicable')),
                ('repeat_interval_days', models.IntegerField(default=0, verbose_name='period in days, 0 if not applicable')),
                ('repeat_interval_years', models.IntegerField(default=0, verbose_name='period in years, 0 if not applicable')),
                ('repeat_interval_months', models.IntegerField(default=0, verbose_name='period in months, 0 if not applicable')),
                ('repeat_interval_weeks', models.IntegerField(default=0, verbose_name='period in weeks, 0 if not applicable')),
                ('repeat_months_mask', models.IntegerField(default=4095, verbose_name='binary mask of applicable months. Always Applicable jan=1 feb=2 mar=4 ... dec=2048 ALL=4095')),
                ('repeat_dayofmonth_mask', models.IntegerField(default=2147483647, verbose_name='binary mask of applicable month days. Always Applicable ALL=2147483647')),
                ('repeat_weekofmonth_mask', models.IntegerField(default=63, verbose_name='binary mask of applicable month week. Always Applicable ALL=15')),
                ('repeat_weekday_mask', models.IntegerField(default=127, verbose_name='binary mask of applicable week day. Always Applicable ALL=127')),
            ],
            options={
                'verbose_name': 'Recurring',
                'verbose_name_plural': 'Recurring',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.0000'), max_digits=10, verbose_name='Statement balance')),
                ('minimum_payment', models.DecimalField(decimal_places=2, default=Decimal('0.0000'), max_digits=10, verbose_name='Minimum Payment')),
                ('statement_date', models.DateField(verbose_name='date of the statement')),
                ('statement_due_date', models.DateField(blank=True, null=True, verbose_name='date where payment is due')),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statement_account', to='budgetdb.account')),
            ],
            options={
                'verbose_name': 'Statement',
                'verbose_name_plural': 'Statements',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
            ],
            options={
                'verbose_name': 'Account audit point',
                'verbose_name_plural': 'Account audit points',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('date_planned', models.DateField(blank=True, null=True, verbose_name='planned date')),
                ('date_actual', models.DateField(verbose_name='date of the transaction')),
                ('joined_order', models.IntegerField(blank=True, null=True, verbose_name='position in a joined transaction')),
                ('amount_planned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='planned amount')),
                ('amount_actual', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='transaction amount')),
                ('Fuel_L', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True, verbose_name='Fuel quantity')),
                ('Fuel_price', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True, verbose_name='Fuel cost')),
                ('description', models.CharField(max_length=200, verbose_name='Description')),
                ('comment', models.CharField(blank=True, max_length=200, null=True, verbose_name='optional comment')),
                ('ismanual', models.BooleanField(default=False, verbose_name='Is this an event that require manual intervention?')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified in a statement')),
                ('deleted', models.BooleanField(default=False, verbose_name='Deleted')),
                ('audit', models.BooleanField(default=False, verbose_name='Audit')),
                ('receipt', models.BooleanField(default=False, verbose_name='Checked with receipt')),
                ('budget_only', models.BooleanField(default=False, verbose_name='counts as 0 after today, only exists to simulate future expenses')),
                ('account_destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='t_account_destination', to='budgetdb.account')),
                ('account_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='t_account_source', to='budgetdb.account')),
                ('budgetedevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.budgetedevent')),
                ('cat1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cat1')),
                ('cat2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cat2')),
                ('statement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.statement')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.vendor')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.AddField(
            model_name='statement',
            name='payment_transaction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_transaction', to='budgetdb.transaction'),
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_interval', models.DateField(blank=True)),
                ('end_interval', models.DateField(blank=True)),
                ('max_interval_slider', models.DateField(blank=True, null=True)),
                ('min_interval_slider', models.DateField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JoinedTransactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('isrecurring', models.BooleanField(default=True, verbose_name='Is this a recurring event?')),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
                ('budgetedevents', models.ManyToManyField(related_name='budgeted_events', to='budgetdb.BudgetedEvent')),
                ('recurring', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.recurring')),
                ('transactions', models.ManyToManyField(related_name='transactions', to='budgetdb.Transaction')),
            ],
            options={
                'verbose_name': 'Joined Transactions',
                'verbose_name_plural': 'Joined Transactions',
            },
        ),
        migrations.AddField(
            model_name='cat2',
            name='CatBudget',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.catbudget'),
        ),
        migrations.AddField(
            model_name='cat2',
            name='cat1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cat1'),
        ),
        migrations.AddField(
            model_name='cat2',
            name='cattype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cattype'),
        ),
        migrations.AddField(
            model_name='cat1',
            name='CatBudget',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.catbudget'),
        ),
        migrations.AddField(
            model_name='cat1',
            name='cattype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cattype'),
        ),
        migrations.AddField(
            model_name='budgetedevent',
            name='cat1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cat1', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='budgetedevent',
            name='cat2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.cat2', verbose_name='Subcategory'),
        ),
        migrations.AddField(
            model_name='budgetedevent',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.vendor'),
        ),
        migrations.CreateModel(
            name='AccountCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
                ('accounts', models.ManyToManyField(related_name='account_categories', to='budgetdb.Account')),
            ],
            options={
                'verbose_name': 'Account Category',
                'verbose_name_plural': 'Account Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccountAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('audit_date', models.DateField(verbose_name='date of the audit')),
                ('audit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.0000'), max_digits=10, verbose_name='audit amount')),
                ('comment', models.CharField(max_length=200)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted, should not be used in any calculations')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_account', to='budgetdb.account')),
            ],
            options={
                'verbose_name': 'Account audit point',
                'verbose_name_plural': 'Account audit points',
            },
        ),
        migrations.AddField(
            model_name='account',
            name='account_host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='budgetdb.accounthost'),
        ),
        migrations.AddField(
            model_name='account',
            name='account_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='budgetdb.account'),
        ),
    ]
